// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProtobufModels.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SkiEngine.Protobuf {

  /// <summary>Holder for reflection information generated from ProtobufModels.proto</summary>
  public static partial class ProtobufModelsReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtobufModels.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtobufModelsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQcm90b2J1Zk1vZGVscy5wcm90bxISU2tpRW5naW5lLlByb3RvYnVmIl8K",
            "GVBTcHJpdGVTaGVldEFuaW1hdGlvbkRhdGESQgoGc3RhdGVzGAEgAygLMjIu",
            "U2tpRW5naW5lLlByb3RvYnVmLlBTcHJpdGVTaGVldEFuaW1hdGlvblN0YXRl",
            "RGF0YSJzCh5QU3ByaXRlU2hlZXRBbmltYXRpb25TdGF0ZURhdGESDQoFbG9v",
            "cHMYASABKAgSQgoGZnJhbWVzGAIgAygLMjIuU2tpRW5naW5lLlByb3RvYnVm",
            "LlBTcHJpdGVTaGVldEFuaW1hdGlvbkZyYW1lRGF0YSJsCh5QU3ByaXRlU2hl",
            "ZXRBbmltYXRpb25GcmFtZURhdGESGAoQdGltZU1pbGxpc2Vjb25kcxgBIAEo",
            "ARIwCgdzcHJpdGVzGAIgAygLMh8uU2tpRW5naW5lLlByb3RvYnVmLlBTcHJp",
            "dGVEYXRhIpcBCgtQU3ByaXRlRGF0YRIxCg10ZXh0dXJlQm91bmRzGAEgASgL",
            "MhouU2tpRW5naW5lLlByb3RvYnVmLlBSZWN0SRIqCgZvcmlnaW4YAiABKAsy",
            "Gi5Ta2lFbmdpbmUuUHJvdG9idWYuUFBvaW50EikKBWNvbG9yGAMgASgLMhou",
            "U2tpRW5naW5lLlByb3RvYnVmLlBDb2xvciJCCgZQUmVjdEkSDAoEbGVmdBgB",
            "IAEoBRILCgN0b3AYAiABKAUSDQoFcmlnaHQYAyABKAUSDgoGYm90dG9tGAQg",
            "ASgFIh4KBlBQb2ludBIJCgF4GAEgASgCEgkKAXkYAiABKAIiHQoGUENvbG9y",
            "EhMKC3BhY2tlZFZhbHVlGAEgASgNYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SkiEngine.Protobuf.PSpriteSheetAnimationData), global::SkiEngine.Protobuf.PSpriteSheetAnimationData.Parser, new[]{ "States" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkiEngine.Protobuf.PSpriteSheetAnimationStateData), global::SkiEngine.Protobuf.PSpriteSheetAnimationStateData.Parser, new[]{ "Loops", "Frames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkiEngine.Protobuf.PSpriteSheetAnimationFrameData), global::SkiEngine.Protobuf.PSpriteSheetAnimationFrameData.Parser, new[]{ "TimeMilliseconds", "Sprites" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkiEngine.Protobuf.PSpriteData), global::SkiEngine.Protobuf.PSpriteData.Parser, new[]{ "TextureBounds", "Origin", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkiEngine.Protobuf.PRectI), global::SkiEngine.Protobuf.PRectI.Parser, new[]{ "Left", "Top", "Right", "Bottom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkiEngine.Protobuf.PPoint), global::SkiEngine.Protobuf.PPoint.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkiEngine.Protobuf.PColor), global::SkiEngine.Protobuf.PColor.Parser, new[]{ "PackedValue" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PSpriteSheetAnimationData : pb::IMessage<PSpriteSheetAnimationData> {
    private static readonly pb::MessageParser<PSpriteSheetAnimationData> _parser = new pb::MessageParser<PSpriteSheetAnimationData>(() => new PSpriteSheetAnimationData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PSpriteSheetAnimationData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkiEngine.Protobuf.ProtobufModelsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteSheetAnimationData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteSheetAnimationData(PSpriteSheetAnimationData other) : this() {
      states_ = other.states_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteSheetAnimationData Clone() {
      return new PSpriteSheetAnimationData(this);
    }

    /// <summary>Field number for the "states" field.</summary>
    public const int StatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SkiEngine.Protobuf.PSpriteSheetAnimationStateData> _repeated_states_codec
        = pb::FieldCodec.ForMessage(10, global::SkiEngine.Protobuf.PSpriteSheetAnimationStateData.Parser);
    private readonly pbc::RepeatedField<global::SkiEngine.Protobuf.PSpriteSheetAnimationStateData> states_ = new pbc::RepeatedField<global::SkiEngine.Protobuf.PSpriteSheetAnimationStateData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkiEngine.Protobuf.PSpriteSheetAnimationStateData> States {
      get { return states_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PSpriteSheetAnimationData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PSpriteSheetAnimationData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!states_.Equals(other.states_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= states_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      states_.WriteTo(output, _repeated_states_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += states_.CalculateSize(_repeated_states_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PSpriteSheetAnimationData other) {
      if (other == null) {
        return;
      }
      states_.Add(other.states_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            states_.AddEntriesFrom(input, _repeated_states_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PSpriteSheetAnimationStateData : pb::IMessage<PSpriteSheetAnimationStateData> {
    private static readonly pb::MessageParser<PSpriteSheetAnimationStateData> _parser = new pb::MessageParser<PSpriteSheetAnimationStateData>(() => new PSpriteSheetAnimationStateData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PSpriteSheetAnimationStateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkiEngine.Protobuf.ProtobufModelsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteSheetAnimationStateData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteSheetAnimationStateData(PSpriteSheetAnimationStateData other) : this() {
      loops_ = other.loops_;
      frames_ = other.frames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteSheetAnimationStateData Clone() {
      return new PSpriteSheetAnimationStateData(this);
    }

    /// <summary>Field number for the "loops" field.</summary>
    public const int LoopsFieldNumber = 1;
    private bool loops_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Loops {
      get { return loops_; }
      set {
        loops_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SkiEngine.Protobuf.PSpriteSheetAnimationFrameData> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(18, global::SkiEngine.Protobuf.PSpriteSheetAnimationFrameData.Parser);
    private readonly pbc::RepeatedField<global::SkiEngine.Protobuf.PSpriteSheetAnimationFrameData> frames_ = new pbc::RepeatedField<global::SkiEngine.Protobuf.PSpriteSheetAnimationFrameData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkiEngine.Protobuf.PSpriteSheetAnimationFrameData> Frames {
      get { return frames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PSpriteSheetAnimationStateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PSpriteSheetAnimationStateData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Loops != other.Loops) return false;
      if(!frames_.Equals(other.frames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Loops != false) hash ^= Loops.GetHashCode();
      hash ^= frames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Loops != false) {
        output.WriteRawTag(8);
        output.WriteBool(Loops);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Loops != false) {
        size += 1 + 1;
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PSpriteSheetAnimationStateData other) {
      if (other == null) {
        return;
      }
      if (other.Loops != false) {
        Loops = other.Loops;
      }
      frames_.Add(other.frames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Loops = input.ReadBool();
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PSpriteSheetAnimationFrameData : pb::IMessage<PSpriteSheetAnimationFrameData> {
    private static readonly pb::MessageParser<PSpriteSheetAnimationFrameData> _parser = new pb::MessageParser<PSpriteSheetAnimationFrameData>(() => new PSpriteSheetAnimationFrameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PSpriteSheetAnimationFrameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkiEngine.Protobuf.ProtobufModelsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteSheetAnimationFrameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteSheetAnimationFrameData(PSpriteSheetAnimationFrameData other) : this() {
      timeMilliseconds_ = other.timeMilliseconds_;
      sprites_ = other.sprites_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteSheetAnimationFrameData Clone() {
      return new PSpriteSheetAnimationFrameData(this);
    }

    /// <summary>Field number for the "timeMilliseconds" field.</summary>
    public const int TimeMillisecondsFieldNumber = 1;
    private double timeMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeMilliseconds {
      get { return timeMilliseconds_; }
      set {
        timeMilliseconds_ = value;
      }
    }

    /// <summary>Field number for the "sprites" field.</summary>
    public const int SpritesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SkiEngine.Protobuf.PSpriteData> _repeated_sprites_codec
        = pb::FieldCodec.ForMessage(18, global::SkiEngine.Protobuf.PSpriteData.Parser);
    private readonly pbc::RepeatedField<global::SkiEngine.Protobuf.PSpriteData> sprites_ = new pbc::RepeatedField<global::SkiEngine.Protobuf.PSpriteData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkiEngine.Protobuf.PSpriteData> Sprites {
      get { return sprites_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PSpriteSheetAnimationFrameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PSpriteSheetAnimationFrameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeMilliseconds, other.TimeMilliseconds)) return false;
      if(!sprites_.Equals(other.sprites_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeMilliseconds != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeMilliseconds);
      hash ^= sprites_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeMilliseconds != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TimeMilliseconds);
      }
      sprites_.WriteTo(output, _repeated_sprites_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeMilliseconds != 0D) {
        size += 1 + 8;
      }
      size += sprites_.CalculateSize(_repeated_sprites_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PSpriteSheetAnimationFrameData other) {
      if (other == null) {
        return;
      }
      if (other.TimeMilliseconds != 0D) {
        TimeMilliseconds = other.TimeMilliseconds;
      }
      sprites_.Add(other.sprites_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            TimeMilliseconds = input.ReadDouble();
            break;
          }
          case 18: {
            sprites_.AddEntriesFrom(input, _repeated_sprites_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PSpriteData : pb::IMessage<PSpriteData> {
    private static readonly pb::MessageParser<PSpriteData> _parser = new pb::MessageParser<PSpriteData>(() => new PSpriteData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PSpriteData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkiEngine.Protobuf.ProtobufModelsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteData(PSpriteData other) : this() {
      TextureBounds = other.textureBounds_ != null ? other.TextureBounds.Clone() : null;
      Origin = other.origin_ != null ? other.Origin.Clone() : null;
      Color = other.color_ != null ? other.Color.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSpriteData Clone() {
      return new PSpriteData(this);
    }

    /// <summary>Field number for the "textureBounds" field.</summary>
    public const int TextureBoundsFieldNumber = 1;
    private global::SkiEngine.Protobuf.PRectI textureBounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkiEngine.Protobuf.PRectI TextureBounds {
      get { return textureBounds_; }
      set {
        textureBounds_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 2;
    private global::SkiEngine.Protobuf.PPoint origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkiEngine.Protobuf.PPoint Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private global::SkiEngine.Protobuf.PColor color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkiEngine.Protobuf.PColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PSpriteData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PSpriteData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TextureBounds, other.TextureBounds)) return false;
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (textureBounds_ != null) hash ^= TextureBounds.GetHashCode();
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (textureBounds_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TextureBounds);
      }
      if (origin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Origin);
      }
      if (color_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (textureBounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextureBounds);
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PSpriteData other) {
      if (other == null) {
        return;
      }
      if (other.textureBounds_ != null) {
        if (textureBounds_ == null) {
          textureBounds_ = new global::SkiEngine.Protobuf.PRectI();
        }
        TextureBounds.MergeFrom(other.TextureBounds);
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::SkiEngine.Protobuf.PPoint();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::SkiEngine.Protobuf.PColor();
        }
        Color.MergeFrom(other.Color);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (textureBounds_ == null) {
              textureBounds_ = new global::SkiEngine.Protobuf.PRectI();
            }
            input.ReadMessage(textureBounds_);
            break;
          }
          case 18: {
            if (origin_ == null) {
              origin_ = new global::SkiEngine.Protobuf.PPoint();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 26: {
            if (color_ == null) {
              color_ = new global::SkiEngine.Protobuf.PColor();
            }
            input.ReadMessage(color_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PRectI : pb::IMessage<PRectI> {
    private static readonly pb::MessageParser<PRectI> _parser = new pb::MessageParser<PRectI>(() => new PRectI());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PRectI> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkiEngine.Protobuf.ProtobufModelsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PRectI() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PRectI(PRectI other) : this() {
      left_ = other.left_;
      top_ = other.top_;
      right_ = other.right_;
      bottom_ = other.bottom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PRectI Clone() {
      return new PRectI(this);
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 1;
    private int left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 2;
    private int top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 3;
    private int right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 4;
    private int bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PRectI);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PRectI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Left != other.Left) return false;
      if (Top != other.Top) return false;
      if (Right != other.Right) return false;
      if (Bottom != other.Bottom) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Left != 0) hash ^= Left.GetHashCode();
      if (Top != 0) hash ^= Top.GetHashCode();
      if (Right != 0) hash ^= Right.GetHashCode();
      if (Bottom != 0) hash ^= Bottom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Left != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Left);
      }
      if (Top != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Top);
      }
      if (Right != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Right);
      }
      if (Bottom != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Bottom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Left != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Left);
      }
      if (Top != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Top);
      }
      if (Right != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Right);
      }
      if (Bottom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bottom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PRectI other) {
      if (other == null) {
        return;
      }
      if (other.Left != 0) {
        Left = other.Left;
      }
      if (other.Top != 0) {
        Top = other.Top;
      }
      if (other.Right != 0) {
        Right = other.Right;
      }
      if (other.Bottom != 0) {
        Bottom = other.Bottom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Left = input.ReadInt32();
            break;
          }
          case 16: {
            Top = input.ReadInt32();
            break;
          }
          case 24: {
            Right = input.ReadInt32();
            break;
          }
          case 32: {
            Bottom = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PPoint : pb::IMessage<PPoint> {
    private static readonly pb::MessageParser<PPoint> _parser = new pb::MessageParser<PPoint>(() => new PPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkiEngine.Protobuf.ProtobufModelsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPoint(PPoint other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPoint Clone() {
      return new PPoint(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PPoint other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PColor : pb::IMessage<PColor> {
    private static readonly pb::MessageParser<PColor> _parser = new pb::MessageParser<PColor>(() => new PColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkiEngine.Protobuf.ProtobufModelsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PColor(PColor other) : this() {
      packedValue_ = other.packedValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PColor Clone() {
      return new PColor(this);
    }

    /// <summary>Field number for the "packedValue" field.</summary>
    public const int PackedValueFieldNumber = 1;
    private uint packedValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PackedValue {
      get { return packedValue_; }
      set {
        packedValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackedValue != other.PackedValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackedValue != 0) hash ^= PackedValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackedValue != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PackedValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PackedValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PColor other) {
      if (other == null) {
        return;
      }
      if (other.PackedValue != 0) {
        PackedValue = other.PackedValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PackedValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
